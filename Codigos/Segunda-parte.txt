// C++ code
//Postulka Aieta Franco
//Voutsina Labrin Alejandro
//Vicente Joaquin
//Giuilano Sohrobigarat
#define A 12
#define B 13
#define C 7
#define D 8
#define E 9
#define F 11
#define G 10
#define SUBE 6
#define BAJA 5
#define SWITCH 4
#define UNIDAD A1
#define DECENA A0
#define APAGADOS 0
#define timerDisplay 10
#define SENSOR_TEMP A2

int motor = 3; //motor
int contador = 0;
int sube = 1;
int baja = 1;
int subePrevio = 1;
int bajaPrevio = 1;

void setup()
{
  pinMode(A, OUTPUT);
  pinMode(B, OUTPUT);
  pinMode(C, OUTPUT);
  pinMode(D, OUTPUT);
  pinMode(E, OUTPUT);
  pinMode(F, OUTPUT);
  pinMode(G, OUTPUT);
  pinMode(UNIDAD, OUTPUT);
  pinMode(DECENA, OUTPUT);
  pinMode(SUBE, INPUT_PULLUP);
  pinMode(BAJA, INPUT_PULLUP);
  pinMode(SWITCH, INPUT_PULLUP);
  Serial.begin(9600);
}

void loop()
{
  int boton_presionado = keypressed();

  if (digitalRead(SWITCH) == 0)
  {
    // Modo de contador normal
    if (boton_presionado == SUBE)
    {
      contador++;
      if (contador > 99)
      {
        contador = 0;
      }
    }
    else if (boton_presionado == BAJA)
    {
      contador--;
      if (contador < 0)
      {
        contador = 99;
      }
    }
  }
  else
  {
    // Modo de números primos
    if (boton_presionado == SUBE)
    {
      contador++;
      int nuevoContador = esPrimoSube(contador);
      contador = nuevoContador;
      if (contador > 99)
      {
        contador = 2;
      }
      
    }
    else if (boton_presionado == BAJA)
    { 
      contador--;
      int nuevoContador = esPrimoBaja(contador);
      contador = nuevoContador;
    }
  }
  imprimir_contador(contador);
  
  int velocidadMotor = regularMotor();

  analogWrite(motor,velocidadMotor);
}


void imprimir_digito(int numero)
 //Hace un switch case con los dígitos del 0 al 9 y muestra
//el dígito que se le pase por parámetro 
{
  digitalWrite(A, LOW);
  digitalWrite(B, LOW);
  digitalWrite(C, LOW);
  digitalWrite(D, LOW);
  digitalWrite(E, LOW);
  digitalWrite(F, LOW);
  digitalWrite(G, LOW);
  switch (numero)
  {
    case 1:
    {
     digitalWrite(B, HIGH);
     digitalWrite(C, HIGH);
     break;
    }
    case 2:
    {
     digitalWrite(A, HIGH);
     digitalWrite(B, HIGH);
     digitalWrite(G, HIGH);
     digitalWrite(E, HIGH);
     digitalWrite(D, HIGH);
     break;
    }
    case 3:
    {
     digitalWrite(A, HIGH);
     digitalWrite(B, HIGH);
     digitalWrite(G, HIGH);
     digitalWrite(C, HIGH);
     digitalWrite(D, HIGH);
     break;
    }
    case 4:
    {
     digitalWrite(F, HIGH);
     digitalWrite(B, HIGH);
     digitalWrite(G, HIGH);
     digitalWrite(C, HIGH);
     break;
    }
    case 5:
    {
     digitalWrite(A, HIGH);
     digitalWrite(F, HIGH);
     digitalWrite(G, HIGH);
     digitalWrite(C, HIGH);
     digitalWrite(D, HIGH);
     break;
    }
    case 6:
    {
     digitalWrite(A, HIGH);
     digitalWrite(F, HIGH);
     digitalWrite(G, HIGH);
     digitalWrite(E, HIGH);
     digitalWrite(C, HIGH);
     digitalWrite(D, HIGH);
     break;
    }
    case 7:
    {
     digitalWrite(A, HIGH);
     digitalWrite(B, HIGH);
     digitalWrite(C, HIGH);
     break;
    }
    case 8:
    {
     digitalWrite(A, HIGH);
     digitalWrite(B, HIGH);
     digitalWrite(C, HIGH);
     digitalWrite(D, HIGH);
     digitalWrite(E, HIGH);
     digitalWrite(F, HIGH);
     digitalWrite(G, HIGH);
     break;
    }
    case 9:
    {
     digitalWrite(A, HIGH);
     digitalWrite(F, HIGH);
     digitalWrite(B, HIGH);
     digitalWrite(G, HIGH);
     digitalWrite(C, HIGH);
     digitalWrite(D, HIGH);
     break;
    }
    case 0:
    {
     digitalWrite(A, HIGH);
     digitalWrite(F, HIGH);
     digitalWrite(B, HIGH);
     digitalWrite(E, HIGH);
     digitalWrite(C, HIGH);
     digitalWrite(D, HIGH);
     break;
    }
    
  }
}


void prender_display(int digito)
//Enciende los displays con sus valores respectivos

{
  if (digito == UNIDAD)
  {
    digitalWrite(UNIDAD,LOW);
    digitalWrite(DECENA,HIGH);
    delay(timerDisplay);
  }
  else if (digito == DECENA)
  {
    digitalWrite(UNIDAD,HIGH);
    digitalWrite(DECENA,LOW);
    delay(timerDisplay);
  }
  else
  {
   //Si el parámetro que se le pasa no es ninguno de los
  //anteriores, la función mantiene a los dos apagados.
   digitalWrite(UNIDAD,HIGH);
   digitalWrite(DECENA,HIGH);
  }
}


void imprimir_contador(int contador)
  //Enciende los displays con los valores del contador
{ 
  prender_display(APAGADOS);
  imprimir_digito(contador/10);//Cálculo para obtener las decenas
  prender_display(DECENA);
  prender_display(APAGADOS);
  imprimir_digito(contador - 10*(contador/10));//Cálculo para obtener las unidades
  prender_display(UNIDAD);
  
}
int keypressed(void)
//Verifica que al presionar el botón y mantenerlo apretado
//no sigan cambiando los valores en el contador
{
  //Comprobamos si el botón está apagado y si anteriormente
 // también lo estaba
  sube = digitalRead(SUBE);
  baja = digitalRead(BAJA);
  if (sube)
    subePrevio = 1;
  if (baja)
    bajaPrevio = 1;
		//Devuelve el valor del pulsador si y solo si se presiona el botón
 		//y anteriormente no estaba presionado
  		if(sube==0 && sube != subePrevio)
        {
          subePrevio = sube;
          return SUBE;
        }
  		if (baja==0 && baja != bajaPrevio)
        {
          bajaPrevio = baja;
          return BAJA;
        }
  		
  return 0;
          
}

bool Primo(int contador)
{
 bool bandera = true;
 if (contador <= 1) //Mientras el contador sea 0 y 1 el valor será falso ya que no son primos
 {
    bandera = false;
  }
  // Verificar si el número es divisible por algún número hasta su raíz cuadrada
  int limite = sqrt(contador);
  for (int i = 2; i <= limite;i++) 
  {
    if (contador % i == 0) 
    {
      bandera =  false;//En caso de que encuentre un numero con el que
      				// el resto de su división dé 0, la bandera cambia a False 
    }
  }
  return bandera;
}

int esPrimoSube(int contador)
//Retorna el próximo numero primo que le siga al contador
{
  bool bandera = Primo(contador);
  
	if (bandera == false)
    { //Si la bandera es False, suma 1 al contador y vuelve a citar la función
     contador++;
     esPrimoSube(contador);
    }
  else
  {
  return contador;
  }
}

int esPrimoBaja(int contador)
 //Retorna numero primo anterior al contador
{
  bool bandera = Primo(contador);

  if (bandera == false)
    { 
    if (contador == 0)
     { // Si el contador esta en 0 y el usuario presiona el boton para bajar
      // el contador pasa a valer 99 y volvemos a citar la funcion
      contador = 99;
      esPrimoBaja(contador);
     }
     else
     {//Si la bandera es False, resta 1 al contador y vuelve a citar la función
      contador--;
       esPrimoBaja(contador);
     }
    }
  else
  {
  return contador;
  }
}
int regularMotor (void)
{//Lee el sensor de temperatura y con un map convierte los valores de entrada
 //a los valores de salida del motor
  int lecturaSensor = analogRead(SENSOR_TEMP);
  int conversorMotor = map(lecturaSensor,20,358,0,255);
  return conversorMotor;
}
